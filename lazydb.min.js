class Database{constructor(e,s,t=(e=>console.log("LazyDB is ready!")),a=(e=>console.log("LazyDB server lost!")),i=!0){this.addr=e,this.port=s,this.id=0,this.lazy_sep='\t\n"lazy_sep"\t\n',this.callbacks={},this.messageQueue=[];let n="";i&&(n+="s"),this.ws=new WebSocket(`ws${n}://${e}:${s}`),this.ws.onopen=(e=>t(e)),this.ws.onclose=(e=>a(e)),this.ws.onmessage=(e=>{let s=e.data.split("|");for(let e=0;e<s.length;e++){const t=s[e];let a=this.messageToJavascript(t);a.s?this.callbacks[a.id].resolve(a.r):this.callbacks[a.id].reject(a.r),this.callbacks[a.id].sync?this.callbacks[a.id].sync(a.r):delete this.callbacks[a.id]}}),this.sendQueue=function(e){e.messageQueue.length>0&&e.ws.readyState===WebSocket.OPEN&&(e.ws.send(e.messageQueue.join("|")),e.messageQueue=[])},setInterval(this.sendQueue,100,this)}messageToJavascript(e){return JSON.parse(e.replaceAll(this.lazy_sep,"|"))}javascriptToMessage(e){return JSON.stringify(e).replaceAll("|",this.lazy_sep)}send(e,s,t=console.log){const a=++this.id,i=this,n=this.javascriptToMessage({c:e,id:a,a:s});if(n.includes("|"))return alert('You can"t use | characters!'),!1;let r=new Promise((s,n)=>{i.callbacks[a]||(i.callbacks[a]={}),i.callbacks[a].resolve=s,i.callbacks[a].reject=n,"get"!==e&&"on"!==e&&"watch"!==e&&"size"!==e&&"sort"!==e||(i.callbacks[a].sync=t)});return this.messageQueue.push(n),r}forgot_password(e=""){return this.send("forgot_password",{email:e})}edit_password(e,s=""){return this.send("edit_password",{password:e,uid:s})}connect(e,s){return this.send("connect",{email:e,password:s})}register(e,s,t,a=""){return this.send("register",{email:e,username:t,full_name:a,password:s})}create(e,s={},t=!0){return e=e.split("/"),this.send("create",{keyPath:e,value:s,w:t})}append(e,s={}){return e=e.split("/"),this.send("append",{keyPath:e,value:s})}on(e,s){return{then:async t=>(s=s.split("/"),await this.send("on",{keyPath:s,command:e},t))}}watch(e,s){return{then:async t=>(s=s.split("/"),this.send("watch",{keyPath:s,command:e},t))}}ping(e,s){return{then:async t=>(s=s.split("/"),await this.send("on",{keyPath:s,command:e},t))}}stop(e,s,t){return t=t.split("/"),this.send("stop",{event:e,command:s,keyPath:t})}size(e){return{then:async s=>(e=e.split("/"),await this.send("size",{keyPath:e},s))}}sort(e,s={char:"_",num:1},t={count:10,start:0,order:"asc"},a="asc"){return{then:async i=>(e=e.split("/"),await this.send("sort",{keyPath:e,split:s,result:t,order:a},i))}}get(e,s=99){return e=e.split("/"),this.send("get",{keyPath:e,depth:s})}exist(e){return e=e.split("/"),this.send("exist",{keyPath:e})}update(e,s,t=!0){return e=e.split("/"),this.send("update",{keyPath:e,value:s,w:t})}delete(e){return e=e.split("/"),this.send("delete",{keyPath:e})}keys(e,s="all"){return e=e.split("/"),this.send("keys",{keyPath:e,filter:s})}join(e){return this.send("join",{gid:e})}invite(e,s,t){return this.send("invite",{gid:e,uid:s,role:t})}leave(e){return this.send("leave",{gid:e})}}
